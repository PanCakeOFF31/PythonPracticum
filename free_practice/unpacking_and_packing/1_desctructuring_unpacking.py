###
# Standard destructuring assignments
###

# Unpacking - tuple
x, y = 20, 'ü§©'
print('x:', x, 'y:', y)

x, y = 'ü§©', '(‚ùÅ¬¥‚ó°`‚ùÅ)'
print('x:', x, 'y:', y)

# –°–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–µ–∂–∞
x = 10, 20
print(type(x))

# –î–µ—Å—Ç—Ä–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞
x, y = [10, 44]
print('x:', x, 'y:', y)
# –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—è–∏ –∫–æ—Ä—Ç–µ–∂–∞
x, y = 10, 44
print('x:', x, 'y:', y)
# –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—è–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ - –ø–æ—Ä—è–¥–æ–∫ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è
x, y = {True, '–ü–æ–ª—è–Ω–∞'}
print('x:', x, 'y:', y)

# –°–ª–æ–≤–∞—Ä–∏
user = {
    'name': 'maxim',
    'age': 25,
    'gender': 'normal',
    'sex': 'm',
}

user_keys = list(user.keys())
user_keys.sort()

# –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º –ø–æ –∫–ª—é—á–∞–º
user_age, user_gender, *user_other = user_keys
print(user_age, user_gender, user_other)

# –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∑–∏–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —Å –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ–º –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º
x, y, *rest = user.values()
print(x, y, rest)
###
# Destructuring in for loops
###
# –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –≤ —Ü–∏–∫–ª–µ for
letters = ['A', 'B', 'X', 'Z']
letters_enum = enumerate(letters)
# –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –ø—Ä—è–º–æ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ for ... in ...
for index, letter in letters_enum:
    print(f'–ü–æ –∏–Ω–¥–µ–∫—Å—É [{index}] –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±—É–∫–≤–∞ "{letter}" ')

letters_enum = enumerate(letters)
# –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –≤ —Ç–µ–ª–µ —Ü–∏–∫–ª–∞ row - tuple.class
for row in letters_enum:
    index, letter = row
    print(f'–ü–æ –∏–Ω–¥–µ–∫—Å—É [{index}] –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –±—É–∫–≤–∞ "{letter}" ')

###
# Ignoring values in destructuring
###

person = ('Bob', 42, 'Engineer')
name, _, profession = person
print(name, profession)

###
# Collect values or Rest values in destructuring
###

digit_list = [1, 2, 3, 4, 5, 6]

head_item, *tail_items = digit_list
print(head_item, tail_items)

*head_items, tail_item = digit_list
print(head_items, tail_item)

head_item, *middle_items, tail_item = digit_list
print(head_item, middle_items, tail_item)
